/**
 * @experimental
 * experimental decorator, waiting on Angular issue to be resolved https://github.com/angular/angular/issues/31495
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * ```
 * @customElement('my-element')
 * class MyElement {
 *   render() {
 *     return html``;
 *   }
 * }
 * ```
 */
export declare const customElement: (tagName: string) => (classOrDescriptor: ClassDescriptor | Constructor<HTMLElement>) => void;
interface ClassDescriptor {
    kind: 'class';
    elements: ClassElement[];
    finisher?: <T>(classDef: Constructor<T>) => undefined | Constructor<T>;
}
interface ClassElement {
    kind: 'field' | 'method';
    key: PropertyKey;
    placement: 'static' | 'prototype' | 'own';
    initializer?: Function;
    extras?: ClassElement[];
    finisher?: <T>(classDef: Constructor<T>) => undefined | Constructor<T>;
    descriptor?: PropertyDescriptor;
}
export declare type Constructor<T> = {
    new (...args: any[]): T;
};
export {};
