{
  "version": "experimental",
  "tags": [
    {
      "name": "cds-alert-actions",
      "path": "./alert/alert-actions.element.d.ts",
      "description": "Web component alert actions to be used inside app-level alert.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-app-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n    <cds-alert-actions>\n       <cds-button>Fix</cds-button>\n    </cds-alert-actions>\n</cds-app-alert>\n```"
    },
    {
      "name": "cds-alert-actions",
      "path": "./alert/alert-actions.element.js",
      "description": "Web component alert actions to be used inside app-level alert.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-app-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n    <cds-alert-actions>\n       <cds-button>Fix</cds-button>\n    </cds-alert-actions>\n</cds-app-alert>\n```"
    },
    {
      "name": "cds-alert-content",
      "path": "./alert/alert-content.element.d.ts",
      "description": "Web component alert content to be used inside alert.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n</cds-alert>\n\n<cds-app-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n    <cds-alert-actions>\n       <cds-button>Fix</cds-button>\n    </cds-alert-actions>\n</cds-app-alert>\n```"
    },
    {
      "name": "cds-alert-content",
      "path": "./alert/alert-content.element.js",
      "description": "Web component alert content to be used inside alert.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n</cds-alert>\n\n<cds-app-alert>\n    <cds-alert-content>Lorem ipsum dolor sit amet</cds-alert-content>\n    <cds-alert-actions>\n       <cds-button>Fix</cds-button>\n    </cds-alert-actions>\n</cds-app-alert>\n```"
    },
    {
      "name": "cds-alert",
      "path": "./alert/alert.element.d.ts",
      "description": "Alerts are banners that communicate a message with a severity attached to it.\nThey grab the user’s attention to provide critical information needed in context.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-alert>\n   <cds-alert-content>This is an alert.</cds-alert-content>\n</cds-alert>\n```",
      "properties": [
        {
          "name": "size",
          "description": "Sets the overall height and width of the alert and icon based on value",
          "type": "\"default\" | \"sm\""
        },
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "status",
          "description": "Sets the color of the alert from a predefined list of statuses",
          "type": "\"info\" | \"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "iconShape",
          "description": "Sets the icon shape to be used to override the default icon. The application must import the icon shape.",
          "type": "string"
        },
        {
          "name": "iconTitle",
          "description": "Sets the title attribute for the icon. This may need to be set especially if the component is using custom icon shape.",
          "type": "string"
        },
        {
          "name": "alertIconShape"
        },
        {
          "name": "alertIconTitle"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the alert. Usually will contain at least a <cds-alert-content> component."
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-alert",
      "path": "./alert/alert.element.js",
      "description": "Alerts are banners that communicate a message with a severity attached to it.\nThey grab the user’s attention to provide critical information needed in context.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-alert>\n   <cds-alert-content>This is an alert.</cds-alert-content>\n</cds-alert>\n```",
      "properties": [
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "status",
          "description": "Sets the color of the alert from a predefined list of statuses",
          "type": "\"info\" | \"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "iconShape",
          "description": "Sets the icon shape to be used to override the default icon. The application must import the icon shape.",
          "type": "string"
        },
        {
          "name": "iconTitle",
          "description": "Sets the title attribute for the icon. This may need to be set especially if the component is using custom icon shape.",
          "type": "string"
        },
        {
          "name": "alertIconShape"
        },
        {
          "name": "alertIconTitle"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the alert. Usually will contain at least a <cds-alert-content> component."
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-app-alert",
      "path": "./alert/app-alert.element.d.ts",
      "description": "App-level alerts are placed at the very top of the global context. They should\nnot be placed in any other configuration. Their purpose is to provide global\nalerts available and relating to the full context of the overall application.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-app-alert>\n  <cds-alert-content>This is an app alert.</cds-alert-content>\n</cds-app-alert>\n```",
      "properties": [
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "status",
          "description": "Sets the color of the alert from a predefined list of statuses",
          "type": "\"info\" | \"warning\" | \"danger\""
        },
        {
          "name": "iconShape",
          "description": "Sets the icon shape to be used to override the default icon. The application must import the icon shape.",
          "type": "string"
        },
        {
          "name": "iconTitle",
          "description": "Sets the title attribute for the icon. This may need to be set especially if the component is using custom icon shape.",
          "type": "string"
        },
        {
          "name": "alertIconShape"
        },
        {
          "name": "alertIconTitle"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the alert. Usually will contain at least a <cds-alert-content> component."
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-app-alert",
      "path": "./alert/app-alert.element.js",
      "description": "App-level alerts are placed at the very top of the global context. They should\nnot be placed in any other configuration. Their purpose is to provide global\nalerts available and relating to the full context of the overall application.\n\n```typescript\nimport '@clr/core/alert';\n```\n\n```html\n<cds-app-alert>\n  <cds-alert-content>This is an app alert.</cds-alert-content>\n</cds-app-alert>\n```",
      "properties": [
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "status",
          "description": "Sets the color of the alert from a predefined list of statuses",
          "type": "\"info\" | \"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "iconShape",
          "description": "Sets the icon shape to be used to override the default icon. The application must import the icon shape.",
          "type": "string"
        },
        {
          "name": "iconTitle",
          "description": "Sets the title attribute for the icon. This may need to be set especially if the component is using custom icon shape.",
          "type": "string"
        },
        {
          "name": "alertIconShape"
        },
        {
          "name": "alertIconTitle"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the alert. Usually will contain at least a <cds-alert-content> component."
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-badge",
      "path": "./badge/badge.element.d.ts",
      "description": "Badges provide a method to highlight a count of an element either next to it\nor inside the element itself.\n\n```typescript\nimport '@clr/core/badge';\n```\n\n```html\n<cds-badge status=\"info\">2</cds-badge>\n```",
      "properties": [
        {
          "name": "color",
          "description": "Sets the color of the badge from the following predefined list of choices:\n'gray', 'purple', 'blue', 'orange', 'light-blue'",
          "type": "\"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\""
        },
        {
          "name": "status",
          "description": "Sets the color of the badge from the following predefined list of statuses:\n'info', 'success', 'warning', 'danger'"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the badge"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--color"
        }
      ]
    },
    {
      "name": "cds-badge",
      "path": "./badge/badge.element.js",
      "description": "Badges provide a method to highlight a count of an element either next to it\nor inside the element itself.\n\n```typescript\nimport '@clr/core/badge';\n```\n\n```html\n<cds-badge status=\"info\">2</cds-badge>\n```",
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the badge"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--color"
        }
      ]
    },
    {
      "name": "cds-button",
      "path": "./button/button.element.d.ts",
      "description": "Buttons allow an application to communicate action and direct user intent.\n\n```typescript\nimport '@clr/core/button';\n```\n\n```html\n<cds-button>submit</cds-button>\n```",
      "properties": [
        {
          "name": "action",
          "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
          "type": "\"solid\" | \"outline\" | \"flat\""
        },
        {
          "name": "status",
          "description": "Sets the color of the button to match the following string statuses",
          "type": "\"success\" | \"danger\" | \"primary\" | \"inverse\""
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the button based on the following string values:",
          "type": "\"sm\" | \"md\" | \"icon\""
        },
        {
          "name": "block",
          "description": "Sets if the button should be full width with display block",
          "type": "boolean"
        },
        {
          "name": "privateHost",
          "type": "HTMLElement"
        },
        {
          "name": "loadingState",
          "description": "Changes the button content based on the value passed.\n\n- `default`: shows the content of the button\n- `loading`: disables the button and shows a spinner inside the button\n- `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n- `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)",
          "type": "ClrLoadingState"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--height"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-button",
      "path": "./button/button.element.js",
      "description": "Buttons allow an application to communicate action and direct user intent.\n\n```typescript\nimport '@clr/core/button';\n```\n\n```html\n<cds-button>submit</cds-button>\n```",
      "properties": [
        {
          "name": "loadingState",
          "description": "Changes the button content based on the value passed.\n\n- `default`: shows the content of the button\n- `loading`: disables the button and shows a spinner inside the button\n- `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n- `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)",
          "default": "\"DEFAULT\""
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--height"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-icon",
      "path": "./icon-shapes/icon.element.d.ts",
      "description": "Icon component that renders svg shapes that can be customized.\nTo load an icon, import the icon with the icon service.\n\n```typescript\nimport '@clr/core/icon';\nimport { ClarityIcons, userIcon } from '@clr/core/icon-shapes';\n\nClarityIcons.addIcons(userIcon);\n```\n\n```html\n<cds-icon shape=\"user\"></cds-icon>\n```",
      "properties": [
        {
          "name": "shape",
          "description": "Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\nthe specified icon cannot be found in the icon registry.",
          "type": "string"
        },
        {
          "name": "size",
          "description": "Apply numerical width-height or a t-shirt-sized CSS classname",
          "type": "string"
        },
        {
          "name": "title",
          "description": "If present, customizes the aria-label for the icon for accessibility.",
          "type": "string"
        },
        {
          "name": "dir",
          "deprecatedMessage": "Takes a directional value (up|down|left|right) that rotates the icon 90° with the\ntop of the icon pointing in the specified direction.\n\nDeprecated in 3.0. Use `direction` instead. `dir` will be removed in 4.0!"
        },
        {
          "name": "direction",
          "description": "Takes a directional value (up|down|left|right) that rotates the icon 90° with the\ntop of the icon pointing in the specified direction."
        },
        {
          "name": "flip",
          "description": "Takes an orientation value (horizontal|vertical) that reverses the orientation of the\nicon vertically or horizontally using the strings: 'horizontal' or 'vertical'"
        },
        {
          "name": "solid",
          "description": "Displays most icons in their \"filled\" version if set to `true`.",
          "type": "boolean"
        },
        {
          "name": "status",
          "description": "Changes color of icon fills and outlines to a color determined by the following\nlist of statuses: 'info', 'success', 'warning', 'danger', 'highlight'"
        },
        {
          "name": "inverse",
          "description": "Inverts color of icon fills and outlines if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean"
        },
        {
          "name": "badge",
          "description": "Attribute: `badge`\nSets the color of the icon decoration that appears in the top-right corner\nof the glyph. The icon decoration is derived from the following predefined types.\n\nThe color of the badge can change according to the following\nlist of statuses:\n'info'  -> blue dot\n'success' -> green dot\n'warning' -> yellow dot\n'danger' -> red dot\n'inherit' -> dot inherits color of full icon glyph\n'warning-triangle' -> yellow triangle\n'inherit-triangle' -> triangle inherits color of full icon glyph\nunrecognized value, empty string, or true -> red dot\n\nBy default, the badge displays a 'danger' dot (a red-colored dot).\n\nSetting the badge to 'null' removes the attribute from the DOM."
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--badge-color"
        }
      ]
    },
    {
      "name": "cds-icon",
      "path": "./icon-shapes/icon.element.js",
      "description": "Icon component that renders svg shapes that can be customized.\nTo load an icon, import the icon with the icon service.\n\n```typescript\nimport '@clr/core/icon';\nimport { ClarityIcons, userIcon } from '@clr/core/icon-shapes';\n\nClarityIcons.addIcons(userIcon);\n```\n\n```html\n<cds-icon shape=\"user\"></cds-icon>\n```",
      "properties": [
        {
          "name": "shape",
          "description": "Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\nthe specified icon cannot be found in the icon registry."
        },
        {
          "name": "size",
          "description": "Apply numerical width-height or a t-shirt-sized CSS classname"
        },
        {
          "name": "solid",
          "description": "Displays most icons in their \"filled\" version if set to `true`.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "status",
          "description": "Changes color of icon fills and outlines to a color determined by the following\nlist of statuses: 'info', 'success', 'warning', 'danger', 'highlight'",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inverse",
          "description": "Inverts color of icon fills and outlines if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "idForAriaLabel",
          "type": "string"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--badge-color"
        }
      ]
    },
    {
      "name": "cds-tag",
      "path": "./tag/tag.element.d.ts",
      "description": "Tags show concise metadata in a compact format.\nTags are visually styled to differentiate them from buttons.\n\n```typescript\nimport '@clr/core/tag';\n```\n\n```html\n<cds-tag status=\"info\">Info</cds-tag>\n```",
      "properties": [
        {
          "name": "status",
          "description": "Sets the color of the tag (and badge if present) from the following predefined list of statuses:\n'info', 'success', 'warning', 'danger'"
        },
        {
          "name": "color",
          "description": "Sets the color of the tag (and badge if present) from a predefined list of choices",
          "type": "\"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\""
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the tag"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-hover"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-tag",
      "path": "./tag/tag.element.js",
      "description": "Tags show concise metadata in a compact format.\nTags are visually styled to differentiate them from buttons.\n\n```typescript\nimport '@clr/core/tag';\n```\n\n```html\n<cds-tag status=\"info\">Info</cds-tag>\n```",
      "slots": [
        {
          "name": "default",
          "description": "Content slot for inside the tag"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-hover"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-test-dropdown",
      "path": "./test-dropdown/test-dropdown.element.d.ts",
      "description": "Dropdown, example test component. Do not use in production.\n\n```typescript\nimport '@clr/core/test-dropdown';\n```\n\n```html\n<cds-test-dropdown title=\"click me!\">\n   Hello World\n</cds-test-dropdown>\n```",
      "properties": [
        {
          "name": "open",
          "description": "Set open to open or close the dropdown",
          "type": "boolean"
        },
        {
          "name": "title",
          "description": "Set the dropdown button text",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "openChange",
          "description": "notify open state change of dropdown"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Content slot for dropdown content"
        }
      ],
      "cssProperties": [
        {
          "name": "--border-color"
        },
        {
          "name": "--background-color"
        },
        {
          "name": "--text-color"
        }
      ]
    }
  ]
}