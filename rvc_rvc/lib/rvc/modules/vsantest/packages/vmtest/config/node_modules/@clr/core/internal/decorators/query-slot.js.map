{"version":3,"file":"query-slot.js","sourceRoot":"","sources":["../../../../src/clr-core/internal/decorators/query-slot.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,2EAA2E;AAC3E,2FAA2F;AAE3F,MAAM,WAAW,GAAG,CAAC,UAA8B,EAAE,KAAS,EAAE,IAAiB,EAAE,EAAE;IACnF,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,UAA8B,EAAE,OAAY,EAAE,EAAE,CAAC,CAAC;IACvE,IAAI,EAAE,QAAQ;IACd,SAAS,EAAE,WAAW;IACtB,GAAG,EAAE,OAAO,CAAC,GAAG;IAChB,UAAU;CACX,CAAC,CAAC;AAOH;;;;;GAKG;AACH,MAAM,UAAU,SAAS,CAAC,QAAgB,EAAE,MAAwB;IAClE,OAAO,CACL,iBAA2B;IAC3B,4CAA4C;IAC5C,IAAkB,EACb,EAAE;QACP,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAEzC,IAAI,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACrC,MAAM,OAAO,GACX,MAAM,CAAC,eAAe;wBACtB,QAAQ,QAAQ,iCAAiC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC;oBACvF,IAAI,MAAM,CAAC,QAAQ,KAAK,OAAO,EAAE;wBAC/B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;qBAC1B;yBAAM;wBACL,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACvB;iBACF;gBAED,OAAO,GAAG,CAAC;YACb,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,OAAO,IAAI,KAAK,SAAS;YACvB,CAAC,CAAC,WAAW,CAAC,UAAU,EAAE,iBAAuB,EAAE,IAAI,CAAC;YACxD,CAAC,CAAC,aAAa,CAAC,UAAU,EAAE,iBAAwB,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,YAAY,CAAC,QAAgB;IAC3C,OAAO,CACL,iBAA2B;IAC3B,4CAA4C;IAC5C,IAAkB,EACb,EAAE;QACP,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACzC,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,OAAO,IAAI,KAAK,SAAS;YACvB,CAAC,CAAC,WAAW,CAAC,UAAU,EAAE,iBAAuB,EAAE,IAAI,CAAC;YACxD,CAAC,CAAC,aAAa,CAAC,UAAU,EAAE,iBAAwB,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { LitElement } from 'lit-element';\n\n// Slot Query decorators are similar to the query decorator in lit-element.\n// Instead of querying the component template they query the content slot of the component.\n\nconst legacyQuery = (descriptor: PropertyDescriptor, proto: {}, name: PropertyKey) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: any) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\nexport interface QuerySlotConfig {\n  required?: 'error' | 'warning';\n  requiredMessage?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlot(selector: string, config?: QuerySlotConfig) {\n  return (\n    protoOrDescriptor: {} | any,\n    // tslint:disable-next-line:no-any decorator\n    name?: PropertyKey\n  ): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const ref = this.querySelector(selector);\n\n        if (!ref && config && config.required) {\n          const message =\n            config.requiredMessage ||\n            `The <${selector}> element is required to use <${this.tagName.toLocaleLowerCase()}>`;\n          if (config.required === 'error') {\n            throw new Error(message);\n          } else {\n            console.warn(message);\n          }\n        }\n\n        return ref;\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return name !== undefined\n      ? legacyQuery(descriptor, protoOrDescriptor as {}, name)\n      : standardQuery(descriptor, protoOrDescriptor as any);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlotAll(selector: string) {\n  return (\n    protoOrDescriptor: {} | any,\n    // tslint:disable-next-line:no-any decorator\n    name?: PropertyKey\n  ): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return name !== undefined\n      ? legacyQuery(descriptor, protoOrDescriptor as {}, name)\n      : standardQuery(descriptor, protoOrDescriptor as any);\n  };\n}\n"]}